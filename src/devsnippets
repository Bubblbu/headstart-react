
  calculateHexagonalOffsets() {
    let counter = 0;
    this.props.store.data.areas.forEach((area) => {
      counter = 0;
      this.props.store.data.papers.filter( (d) => (d.area === area) ).forEach((paper) => {
        let radius = this.props.store.data.nodes.filter( (d) => (d.area === area) )[0].r/2.;
        paper.hex_x = radius*Math.cos((Math.PI/3.)*(counter % 6));
        paper.hex_y = radius*Math.sin((Math.PI/3.)*(counter % 6));
        counter ++;
      })
    });
  }

  setPaperCoordinates() {
    let papers = this.props.store.data.papers;
    let nodes = this.props.store.data.nodes;

    for (let i = 0; i < papers.length; i++) {
      for (let j = 0; j < nodes.length; j++) {
        if (papers[i].area === nodes[j].area) {
          papers[i].x = nodes[j].x - 9 + papers[i].hex_x;
          papers[i].y = nodes[j].y - 15 + papers[i].hex_y;
        }
      }
    }
  }